{"version":3,"sources":["components/card-component/card.component.jsx","components/card-list.components.jsx","components/search-components/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","className","src","id","name","CardList","monsters","map","SearchBox","placeholder","onChange","type","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","react","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GACjB,IAAQC,EAAYD,EAAZC,QACR,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,oBACR,6BAAMH,EAAQI,WCJbC,EAAW,SAACN,GACrB,IAAQO,EAAaP,EAAbO,SACR,OACI,qBAAKL,UAAU,YAAf,SACKK,EAASC,KAAI,SAAAP,GAAO,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCPtBK,G,MAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACrC,OACI,uBACIT,UAAU,SACVU,KAAK,SACLF,YAAaA,EACbC,SAAUA,MC8BPE,E,kDAjCb,aAAe,IAAD,8BACZ,gBAWFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAOd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAM7C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQI,KAAKwB,cAAcC,SAASb,EAAYY,kBAClD,OACE,sBAAK3B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEQ,YAAY,gBACZC,SAAUe,KAAKZ,eAEjB,cAAC,EAAD,CAAUP,SAAUoB,W,GA5BVI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a281fdfb.chunk.js","sourcesContent":["import react from \"react\";\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = (props) => {\r\n    const { monster } = props\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${monster.id}/&size=180X180`} />\r\n            <h1 >{monster.name}</h1>\r\n        </div>\r\n    )\r\n}","import react from \"react\";\r\nimport './card-list.styles.css';\r\nimport { Card } from \"./card-component/card.component\";\r\n\r\n\r\nexport const CardList = (props) => {\r\n    const { monsters } = props\r\n    return (\r\n        <div className=\"card-list\" >\r\n            {monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))}\r\n        </div>\r\n    )\r\n}","import react from \"react\";\r\nimport './search.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, onChange }) => {\r\n    return (\r\n        <input\r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n","import react from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list.components';\nimport { SearchBox } from './components/search-components/search.component'\n\nclass App extends react.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Ben 10 Aliens</h1>\n        <SearchBox\n          placeholder='Search Aliens'\n          onChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}